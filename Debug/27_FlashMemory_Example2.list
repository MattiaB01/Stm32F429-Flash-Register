
27_FlashMemory_Example2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000219c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800234c  0800234c  0001234c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800237c  0800237c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800237c  0800237c  0001237c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002384  08002384  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000d8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000861d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a8b  00000000  00000000  00028659  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000738  00000000  00000000  0002a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000660  00000000  00000000  0002a820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022961  00000000  00000000  0002ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000089d0  00000000  00000000  0004d7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7916  00000000  00000000  000561b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012dac7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ae0  00000000  00000000  0012db1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002334 	.word	0x08002334

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08002334 	.word	0x08002334

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96e 	b.w	80004f4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468c      	mov	ip, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	f040 8083 	bne.w	8000346 <__udivmoddi4+0x116>
 8000240:	428a      	cmp	r2, r1
 8000242:	4617      	mov	r7, r2
 8000244:	d947      	bls.n	80002d6 <__udivmoddi4+0xa6>
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	b142      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024c:	f1c2 0020 	rsb	r0, r2, #32
 8000250:	fa24 f000 	lsr.w	r0, r4, r0
 8000254:	4091      	lsls	r1, r2
 8000256:	4097      	lsls	r7, r2
 8000258:	ea40 0c01 	orr.w	ip, r0, r1
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbbc f6f8 	udiv	r6, ip, r8
 8000268:	fa1f fe87 	uxth.w	lr, r7
 800026c:	fb08 c116 	mls	r1, r8, r6, ip
 8000270:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000274:	fb06 f10e 	mul.w	r1, r6, lr
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18fb      	adds	r3, r7, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 8119 	bcs.w	80004b8 <__udivmoddi4+0x288>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8116 	bls.w	80004b8 <__udivmoddi4+0x288>
 800028c:	3e02      	subs	r6, #2
 800028e:	443b      	add	r3, r7
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a4:	45a6      	cmp	lr, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	193c      	adds	r4, r7, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8105 	bcs.w	80004bc <__udivmoddi4+0x28c>
 80002b2:	45a6      	cmp	lr, r4
 80002b4:	f240 8102 	bls.w	80004bc <__udivmoddi4+0x28c>
 80002b8:	3802      	subs	r0, #2
 80002ba:	443c      	add	r4, r7
 80002bc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c0:	eba4 040e 	sub.w	r4, r4, lr
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	b902      	cbnz	r2, 80002da <__udivmoddi4+0xaa>
 80002d8:	deff      	udf	#255	; 0xff
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d150      	bne.n	8000384 <__udivmoddi4+0x154>
 80002e2:	1bcb      	subs	r3, r1, r7
 80002e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e8:	fa1f f887 	uxth.w	r8, r7
 80002ec:	2601      	movs	r6, #1
 80002ee:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f2:	0c21      	lsrs	r1, r4, #16
 80002f4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002fc:	fb08 f30c 	mul.w	r3, r8, ip
 8000300:	428b      	cmp	r3, r1
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000304:	1879      	adds	r1, r7, r1
 8000306:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0xe2>
 800030c:	428b      	cmp	r3, r1
 800030e:	f200 80e9 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 8000312:	4684      	mov	ip, r0
 8000314:	1ac9      	subs	r1, r1, r3
 8000316:	b2a3      	uxth	r3, r4
 8000318:	fbb1 f0fe 	udiv	r0, r1, lr
 800031c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	fb08 f800 	mul.w	r8, r8, r0
 8000328:	45a0      	cmp	r8, r4
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x10c>
 800032c:	193c      	adds	r4, r7, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x10a>
 8000334:	45a0      	cmp	r8, r4
 8000336:	f200 80d9 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 800033a:	4618      	mov	r0, r3
 800033c:	eba4 0408 	sub.w	r4, r4, r8
 8000340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000344:	e7bf      	b.n	80002c6 <__udivmoddi4+0x96>
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x12e>
 800034a:	2d00      	cmp	r5, #0
 800034c:	f000 80b1 	beq.w	80004b2 <__udivmoddi4+0x282>
 8000350:	2600      	movs	r6, #0
 8000352:	e9c5 0100 	strd	r0, r1, [r5]
 8000356:	4630      	mov	r0, r6
 8000358:	4631      	mov	r1, r6
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f683 	clz	r6, r3
 8000362:	2e00      	cmp	r6, #0
 8000364:	d14a      	bne.n	80003fc <__udivmoddi4+0x1cc>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0x140>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80b8 	bhi.w	80004e0 <__udivmoddi4+0x2b0>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0103 	sbc.w	r1, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	468c      	mov	ip, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0a8      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800037e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000384:	f1c2 0320 	rsb	r3, r2, #32
 8000388:	fa20 f603 	lsr.w	r6, r0, r3
 800038c:	4097      	lsls	r7, r2
 800038e:	fa01 f002 	lsl.w	r0, r1, r2
 8000392:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000396:	40d9      	lsrs	r1, r3
 8000398:	4330      	orrs	r0, r6
 800039a:	0c03      	lsrs	r3, r0, #16
 800039c:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a0:	fa1f f887 	uxth.w	r8, r7
 80003a4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb06 f108 	mul.w	r1, r6, r8
 80003b0:	4299      	cmp	r1, r3
 80003b2:	fa04 f402 	lsl.w	r4, r4, r2
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x19c>
 80003b8:	18fb      	adds	r3, r7, r3
 80003ba:	f106 3cff 	add.w	ip, r6, #4294967295
 80003be:	f080 808d 	bcs.w	80004dc <__udivmoddi4+0x2ac>
 80003c2:	4299      	cmp	r1, r3
 80003c4:	f240 808a 	bls.w	80004dc <__udivmoddi4+0x2ac>
 80003c8:	3e02      	subs	r6, #2
 80003ca:	443b      	add	r3, r7
 80003cc:	1a5b      	subs	r3, r3, r1
 80003ce:	b281      	uxth	r1, r0
 80003d0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb00 f308 	mul.w	r3, r0, r8
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x1c4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ea:	d273      	bcs.n	80004d4 <__udivmoddi4+0x2a4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d971      	bls.n	80004d4 <__udivmoddi4+0x2a4>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4439      	add	r1, r7
 80003f4:	1acb      	subs	r3, r1, r3
 80003f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fa:	e778      	b.n	80002ee <__udivmoddi4+0xbe>
 80003fc:	f1c6 0c20 	rsb	ip, r6, #32
 8000400:	fa03 f406 	lsl.w	r4, r3, r6
 8000404:	fa22 f30c 	lsr.w	r3, r2, ip
 8000408:	431c      	orrs	r4, r3
 800040a:	fa20 f70c 	lsr.w	r7, r0, ip
 800040e:	fa01 f306 	lsl.w	r3, r1, r6
 8000412:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000416:	fa21 f10c 	lsr.w	r1, r1, ip
 800041a:	431f      	orrs	r7, r3
 800041c:	0c3b      	lsrs	r3, r7, #16
 800041e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000422:	fa1f f884 	uxth.w	r8, r4
 8000426:	fb0e 1119 	mls	r1, lr, r9, r1
 800042a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042e:	fb09 fa08 	mul.w	sl, r9, r8
 8000432:	458a      	cmp	sl, r1
 8000434:	fa02 f206 	lsl.w	r2, r2, r6
 8000438:	fa00 f306 	lsl.w	r3, r0, r6
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x220>
 800043e:	1861      	adds	r1, r4, r1
 8000440:	f109 30ff 	add.w	r0, r9, #4294967295
 8000444:	d248      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 8000446:	458a      	cmp	sl, r1
 8000448:	d946      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4421      	add	r1, r4
 8000450:	eba1 010a 	sub.w	r1, r1, sl
 8000454:	b2bf      	uxth	r7, r7
 8000456:	fbb1 f0fe 	udiv	r0, r1, lr
 800045a:	fb0e 1110 	mls	r1, lr, r0, r1
 800045e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000462:	fb00 f808 	mul.w	r8, r0, r8
 8000466:	45b8      	cmp	r8, r7
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x24a>
 800046a:	19e7      	adds	r7, r4, r7
 800046c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000470:	d22e      	bcs.n	80004d0 <__udivmoddi4+0x2a0>
 8000472:	45b8      	cmp	r8, r7
 8000474:	d92c      	bls.n	80004d0 <__udivmoddi4+0x2a0>
 8000476:	3802      	subs	r0, #2
 8000478:	4427      	add	r7, r4
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	eba7 0708 	sub.w	r7, r7, r8
 8000482:	fba0 8902 	umull	r8, r9, r0, r2
 8000486:	454f      	cmp	r7, r9
 8000488:	46c6      	mov	lr, r8
 800048a:	4649      	mov	r1, r9
 800048c:	d31a      	bcc.n	80004c4 <__udivmoddi4+0x294>
 800048e:	d017      	beq.n	80004c0 <__udivmoddi4+0x290>
 8000490:	b15d      	cbz	r5, 80004aa <__udivmoddi4+0x27a>
 8000492:	ebb3 020e 	subs.w	r2, r3, lr
 8000496:	eb67 0701 	sbc.w	r7, r7, r1
 800049a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049e:	40f2      	lsrs	r2, r6
 80004a0:	ea4c 0202 	orr.w	r2, ip, r2
 80004a4:	40f7      	lsrs	r7, r6
 80004a6:	e9c5 2700 	strd	r2, r7, [r5]
 80004aa:	2600      	movs	r6, #0
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e70b      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e9      	b.n	8000290 <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fd      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c0:	4543      	cmp	r3, r8
 80004c2:	d2e5      	bcs.n	8000490 <__udivmoddi4+0x260>
 80004c4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c8:	eb69 0104 	sbc.w	r1, r9, r4
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7df      	b.n	8000490 <__udivmoddi4+0x260>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e7d2      	b.n	800047a <__udivmoddi4+0x24a>
 80004d4:	4660      	mov	r0, ip
 80004d6:	e78d      	b.n	80003f4 <__udivmoddi4+0x1c4>
 80004d8:	4681      	mov	r9, r0
 80004da:	e7b9      	b.n	8000450 <__udivmoddi4+0x220>
 80004dc:	4666      	mov	r6, ip
 80004de:	e775      	b.n	80003cc <__udivmoddi4+0x19c>
 80004e0:	4630      	mov	r0, r6
 80004e2:	e74a      	b.n	800037a <__udivmoddi4+0x14a>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	4439      	add	r1, r7
 80004ea:	e713      	b.n	8000314 <__udivmoddi4+0xe4>
 80004ec:	3802      	subs	r0, #2
 80004ee:	443c      	add	r4, r7
 80004f0:	e724      	b.n	800033c <__udivmoddi4+0x10c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <unlock>:
#define FLASH_FKEY1 0x45670123
#define FLASH_FKEY2 0xCDEF89AB


void unlock()
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0

	// Wait for the flash memory not to be busy
	while ((FLASH->SR & FLASH_SR_BSY) != 0 );
 80004fc:	bf00      	nop
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <unlock+0x30>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f9      	bne.n	80004fe <unlock+0x6>
	// Check if the controller is unlocked already
	if ((FLASH->CR & FLASH_CR_LOCK) != 0 ){
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <unlock+0x30>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	2b00      	cmp	r3, #0
 8000510:	da05      	bge.n	800051e <unlock+0x26>
	    // Write the first key
	    FLASH->KEYR = FLASH_FKEY1;
 8000512:	4b05      	ldr	r3, [pc, #20]	; (8000528 <unlock+0x30>)
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <unlock+0x34>)
 8000516:	605a      	str	r2, [r3, #4]
	    // Write the second key
	    FLASH->KEYR = FLASH_FKEY2;
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <unlock+0x30>)
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <unlock+0x38>)
 800051c:	605a      	str	r2, [r3, #4]
	}
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	40023c00 	.word	0x40023c00
 800052c:	45670123 	.word	0x45670123
 8000530:	cdef89ab 	.word	0xcdef89ab

08000534 <erase_sec11>:


//erase sector n.11
void erase_sec11()
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
	STM32F415xx/17xx) and out of 24 (for STM32F42xxx and STM32F43xxx) in the main
	memory block you wish to erase (SNB) in the FLASH_CR register
	3. Set the STRT bit in the FLASH_CR register
	4. Wait for the BSY bit to be cleared */

	while ((FLASH->SR & FLASH_SR_BSY)!=0) {};
 8000538:	bf00      	nop
 800053a:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <erase_sec11+0x80>)
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1f9      	bne.n	800053a <erase_sec11+0x6>

	//FLASH->CR |= (1U<<1);
	FLASH->CR |= FLASH_CR_SER;
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <erase_sec11+0x80>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <erase_sec11+0x80>)
 800054c:	f043 0302 	orr.w	r3, r3, #2
 8000550:	6113      	str	r3, [r2, #16]

	//Sector 11
	FLASH->CR |= (1U<<3); 	//1
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <erase_sec11+0x80>)
 8000554:	691b      	ldr	r3, [r3, #16]
 8000556:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <erase_sec11+0x80>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6113      	str	r3, [r2, #16]
	FLASH->CR |= (1U<<4); 	//1
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <erase_sec11+0x80>)
 8000560:	691b      	ldr	r3, [r3, #16]
 8000562:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <erase_sec11+0x80>)
 8000564:	f043 0310 	orr.w	r3, r3, #16
 8000568:	6113      	str	r3, [r2, #16]
	FLASH->CR &=~ (1U<<5); 	//0
 800056a:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <erase_sec11+0x80>)
 800056c:	691b      	ldr	r3, [r3, #16]
 800056e:	4a11      	ldr	r2, [pc, #68]	; (80005b4 <erase_sec11+0x80>)
 8000570:	f023 0320 	bic.w	r3, r3, #32
 8000574:	6113      	str	r3, [r2, #16]
	FLASH->CR |= (1U<<6); 	//1
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <erase_sec11+0x80>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <erase_sec11+0x80>)
 800057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000580:	6113      	str	r3, [r2, #16]
	FLASH->CR &=~ (1U<<7); 	//0
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <erase_sec11+0x80>)
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <erase_sec11+0x80>)
 8000588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800058c:	6113      	str	r3, [r2, #16]

	FLASH->CR |= FLASH_CR_STRT;
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <erase_sec11+0x80>)
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <erase_sec11+0x80>)
 8000594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000598:	6113      	str	r3, [r2, #16]

	while ((FLASH->SR & FLASH_SR_BSY)!=0) {};
 800059a:	bf00      	nop
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <erase_sec11+0x80>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d1f9      	bne.n	800059c <erase_sec11+0x68>




}
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	40023c00 	.word	0x40023c00

080005b8 <program>:


void program(char *data, uint32_t address)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	performed first.
	*/


	//1
	while ((FLASH->SR & FLASH_SR_BSY) !=0) {};
 80005c2:	bf00      	nop
 80005c4:	4b33      	ldr	r3, [pc, #204]	; (8000694 <program+0xdc>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1f9      	bne.n	80005c4 <program+0xc>

	//2
	FLASH->CR |= FLASH_CR_PG;
 80005d0:	4b30      	ldr	r3, [pc, #192]	; (8000694 <program+0xdc>)
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	4a2f      	ldr	r2, [pc, #188]	; (8000694 <program+0xdc>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	6113      	str	r3, [r2, #16]

	//3
	//SIZE
	FLASH->CR |= FLASH_CR_PSIZE_1; //32bit
 80005dc:	4b2d      	ldr	r3, [pc, #180]	; (8000694 <program+0xdc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <program+0xdc>)
 80005e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e6:	6113      	str	r3, [r2, #16]


	//data

	uint8_t rest,words;
	words= strlen(data)/4;
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe01 	bl	80001f0 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	089b      	lsrs	r3, r3, #2
 80005f2:	73bb      	strb	r3, [r7, #14]
	rest = strlen(data)%4;
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fdfb 	bl	80001f0 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0303 	and.w	r3, r3, #3
 8000602:	737b      	strb	r3, [r7, #13]

	for (uint8_t i=0; i<words; i++ )
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	e00c      	b.n	8000624 <program+0x6c>
	{
		 *(uint32_t *) (address) = *(uint32_t *) data;
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	6812      	ldr	r2, [r2, #0]
 8000610:	601a      	str	r2, [r3, #0]

		data +=4;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3304      	adds	r3, #4
 8000616:	607b      	str	r3, [r7, #4]
		 address+=4;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	3304      	adds	r3, #4
 800061c:	603b      	str	r3, [r7, #0]
	for (uint8_t i=0; i<words; i++ )
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfa      	ldrb	r2, [r7, #15]
 8000626:	7bbb      	ldrb	r3, [r7, #14]
 8000628:	429a      	cmp	r2, r3
 800062a:	d3ee      	bcc.n	800060a <program+0x52>
	}

	switch(rest){
 800062c:	7b7b      	ldrb	r3, [r7, #13]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d016      	beq.n	8000660 <program+0xa8>
 8000632:	2b03      	cmp	r3, #3
 8000634:	dc1b      	bgt.n	800066e <program+0xb6>
 8000636:	2b01      	cmp	r3, #1
 8000638:	d002      	beq.n	8000640 <program+0x88>
 800063a:	2b02      	cmp	r3, #2
 800063c:	d007      	beq.n	800064e <program+0x96>
 800063e:	e016      	b.n	800066e <program+0xb6>
					case 1:
						*(uint32_t *)data = (*(uint32_t *)data) | 0xFFFFFF00;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f063 02ff 	orn	r2, r3, #255	; 0xff
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
						break;
 800064c:	e00f      	b.n	800066e <program+0xb6>
					case 2:
						*(uint32_t *)data = (*(uint32_t *)data) | 0xFFFF0000;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8000656:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
						break;
 800065e:	e006      	b.n	800066e <program+0xb6>
					case 3:
						*(uint32_t *)data = (*(uint32_t *)data) | 0xFF000000;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
						break;
 800066c:	bf00      	nop
	}

	if (rest!=0)
 800066e:	7b7b      	ldrb	r3, [r7, #13]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <program+0xc4>
	{
		*(uint32_t*)(address)=*(uint32_t *) data;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	6812      	ldr	r2, [r2, #0]
 800067a:	601a      	str	r2, [r3, #0]
	}



    //4
	while ((FLASH->SR & FLASH_SR_BSY) != 0) {};
 800067c:	bf00      	nop
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <program+0xdc>)
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f9      	bne.n	800067e <program+0xc6>
}
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023c00 	.word	0x40023c00

08000698 <program_8>:



void program_8(char *data, uint32_t address)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]



	//1
	while ((FLASH->SR & FLASH_SR_BSY) !=0) {};
 80006a2:	bf00      	nop
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <program_8+0x98>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f9      	bne.n	80006a4 <program_8+0xc>

	//8bit Size
	FLASH->CR &= ~(1U<<8);
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <program_8+0x98>)
 80006b2:	691b      	ldr	r3, [r3, #16]
 80006b4:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <program_8+0x98>)
 80006b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006ba:	6113      	str	r3, [r2, #16]
	FLASH->CR &= ~(1U<<9);
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <program_8+0x98>)
 80006be:	691b      	ldr	r3, [r3, #16]
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <program_8+0x98>)
 80006c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80006c6:	6113      	str	r3, [r2, #16]
	//2
	FLASH->CR |= FLASH_CR_PG;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <program_8+0x98>)
 80006ca:	691b      	ldr	r3, [r3, #16]
 80006cc:	4a18      	ldr	r2, [pc, #96]	; (8000730 <program_8+0x98>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6113      	str	r3, [r2, #16]


	uint8_t rest,words;
	words= strlen(data);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fd8b 	bl	80001f0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	73bb      	strb	r3, [r7, #14]
	rest = strlen(data)%4;
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff fd86 	bl	80001f0 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 0303 	and.w	r3, r3, #3
 80006ec:	737b      	strb	r3, [r7, #13]


	for (uint8_t i=0; i<words; i++ )
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	e00c      	b.n	800070e <program_8+0x76>
	{
		 *(uint8_t *) (address) = *(uint8_t *) data;
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	701a      	strb	r2, [r3, #0]

		data++;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3301      	adds	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
		address++;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	603b      	str	r3, [r7, #0]
	for (uint8_t i=0; i<words; i++ )
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	429a      	cmp	r2, r3
 8000714:	d3ee      	bcc.n	80006f4 <program_8+0x5c>
	}

    //4
	while ((FLASH->SR & FLASH_SR_BSY) != 0) {};
 8000716:	bf00      	nop
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <program_8+0x98>)
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f9      	bne.n	8000718 <program_8+0x80>
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023c00 	.word	0x40023c00

08000734 <read>:



void read(uint32_t address, char *buffer,uint8_t nWords)
{
 8000734:	b480      	push	{r7}
 8000736:	b087      	sub	sp, #28
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	4613      	mov	r3, r2
 8000740:	71fb      	strb	r3, [r7, #7]

	uint32_t *d;
	d=buffer;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	617b      	str	r3, [r7, #20]
	//per leggere 4 word da 32bit
	for (uint8_t i=0; i<nWords; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	74fb      	strb	r3, [r7, #19]
 800074a:	e00c      	b.n	8000766 <read+0x32>
	{

	*d = *(uint32_t*) address;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	601a      	str	r2, [r3, #0]
	d++;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3304      	adds	r3, #4
 8000758:	617b      	str	r3, [r7, #20]
	address+=4;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3304      	adds	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0; i<nWords; i++)
 8000760:	7cfb      	ldrb	r3, [r7, #19]
 8000762:	3301      	adds	r3, #1
 8000764:	74fb      	strb	r3, [r7, #19]
 8000766:	7cfa      	ldrb	r2, [r7, #19]
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	429a      	cmp	r2, r3
 800076c:	d3ee      	bcc.n	800074c <read+0x18>
	}


}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	371c      	adds	r7, #28
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <lock>:


void lock()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	while ((FLASH->SR & FLASH_SR_BSY) != 0 );
 8000780:	bf00      	nop
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <lock+0x28>)
 8000784:	68db      	ldr	r3, [r3, #12]
 8000786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d1f9      	bne.n	8000782 <lock+0x6>
	FLASH->CR |= FLASH_CR_LOCK;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <lock+0x28>)
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <lock+0x28>)
 8000794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000798:	6113      	str	r3, [r2, #16]

}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	40023c00 	.word	0x40023c00

080007a8 <main>:
void StartDefaultTask(void const * argument);

#define location 	0x080E0000
#define location2 	0x080E0010
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

 uint32_t loc = location;
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <main+0x50>)
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
 uint32_t loc2 = location2;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <main+0x54>)
 80007b4:	623b      	str	r3, [r7, #32]


 char *data = "ABCDEFGHILK\0";
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <main+0x58>)
 80007b8:	61fb      	str	r3, [r7, #28]
 char *data2= "123456789AA\0";
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <main+0x5c>)
 80007bc:	61bb      	str	r3, [r7, #24]

  HAL_Init();
 80007be:	f000 fba1 	bl	8000f04 <HAL_Init>

  SystemClock_Config();
 80007c2:	f000 f821 	bl	8000808 <SystemClock_Config>

  MX_GPIO_Init();
 80007c6:	f000 f891 	bl	80008ec <MX_GPIO_Init>

  unlock();
 80007ca:	f7ff fe95 	bl	80004f8 <unlock>
  erase_sec11();
 80007ce:	f7ff feb1 	bl	8000534 <erase_sec11>

  program (data,loc2);
 80007d2:	6a39      	ldr	r1, [r7, #32]
 80007d4:	69f8      	ldr	r0, [r7, #28]
 80007d6:	f7ff feef 	bl	80005b8 <program>
  program_8(data2, loc);
 80007da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007dc:	69b8      	ldr	r0, [r7, #24]
 80007de:	f7ff ff5b 	bl	8000698 <program_8>

  lock();
 80007e2:	f7ff ffcb 	bl	800077c <lock>

  char buffer[16];
  uint8_t nWords=4;
 80007e6:	2304      	movs	r3, #4
 80007e8:	75fb      	strb	r3, [r7, #23]

  read(location, buffer, nWords);
 80007ea:	7dfa      	ldrb	r2, [r7, #23]
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	4619      	mov	r1, r3
 80007f0:	4801      	ldr	r0, [pc, #4]	; (80007f8 <main+0x50>)
 80007f2:	f7ff ff9f 	bl	8000734 <read>





  while (1)
 80007f6:	e7fe      	b.n	80007f6 <main+0x4e>
 80007f8:	080e0000 	.word	0x080e0000
 80007fc:	080e0010 	.word	0x080e0010
 8000800:	0800234c 	.word	0x0800234c
 8000804:	0800235c 	.word	0x0800235c

08000808 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fd84 	bl	8002324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0xdc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a2b      	ldr	r2, [pc, #172]	; (80008e4 <SystemClock_Config+0xdc>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b29      	ldr	r3, [pc, #164]	; (80008e4 <SystemClock_Config+0xdc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xe0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <SystemClock_Config+0xe0>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xe0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000864:	230a      	movs	r3, #10
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000870:	2301      	movs	r3, #1
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000874:	2302      	movs	r3, #2
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000878:	2300      	movs	r3, #0
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800087c:	2308      	movs	r3, #8
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000880:	23b4      	movs	r3, #180	; 0xb4
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000884:	2302      	movs	r3, #2
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000888:	2307      	movs	r3, #7
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 0320 	add.w	r3, r7, #32
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fed1 	bl	8001638 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800089c:	f000 fa92 	bl	8000dc4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f000 fe7a 	bl	8001598 <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008aa:	f000 fa8b 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	2105      	movs	r1, #5
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f92b 	bl	8001b28 <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008d8:	f000 fa74 	bl	8000dc4 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08e      	sub	sp, #56	; 0x38
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
 8000906:	4bb2      	ldr	r3, [pc, #712]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4ab1      	ldr	r2, [pc, #708]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4baf      	ldr	r3, [pc, #700]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	623b      	str	r3, [r7, #32]
 800091c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
 8000922:	4bab      	ldr	r3, [pc, #684]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4aaa      	ldr	r2, [pc, #680]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4ba8      	ldr	r3, [pc, #672]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0320 	and.w	r3, r3, #32
 8000936:	61fb      	str	r3, [r7, #28]
 8000938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
 800093e:	4ba4      	ldr	r3, [pc, #656]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4aa3      	ldr	r2, [pc, #652]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4ba1      	ldr	r3, [pc, #644]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	61bb      	str	r3, [r7, #24]
 8000954:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	4b9d      	ldr	r3, [pc, #628]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a9c      	ldr	r2, [pc, #624]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b9a      	ldr	r3, [pc, #616]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b96      	ldr	r3, [pc, #600]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a95      	ldr	r2, [pc, #596]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b93      	ldr	r3, [pc, #588]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b8f      	ldr	r3, [pc, #572]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a8e      	ldr	r2, [pc, #568]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b8c      	ldr	r3, [pc, #560]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	4b88      	ldr	r3, [pc, #544]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a87      	ldr	r2, [pc, #540]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009b4:	f043 0310 	orr.w	r3, r3, #16
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b85      	ldr	r3, [pc, #532]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b81      	ldr	r3, [pc, #516]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a80      	ldr	r2, [pc, #512]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b7e      	ldr	r3, [pc, #504]	; (8000bd0 <MX_GPIO_Init+0x2e4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2116      	movs	r1, #22
 80009e6:	487b      	ldr	r0, [pc, #492]	; (8000bd4 <MX_GPIO_Init+0x2e8>)
 80009e8:	f000 fdbc 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	4879      	ldr	r0, [pc, #484]	; (8000bd8 <MX_GPIO_Init+0x2ec>)
 80009f2:	f000 fdb7 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009fc:	4877      	ldr	r0, [pc, #476]	; (8000bdc <MX_GPIO_Init+0x2f0>)
 80009fe:	f000 fdb1 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000a08:	4875      	ldr	r0, [pc, #468]	; (8000be0 <MX_GPIO_Init+0x2f4>)
 8000a0a:	f000 fdab 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a0e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a20:	230c      	movs	r3, #12
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	486e      	ldr	r0, [pc, #440]	; (8000be4 <MX_GPIO_Init+0x2f8>)
 8000a2c:	f000 fbee 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000a30:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000a42:	2305      	movs	r3, #5
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4865      	ldr	r0, [pc, #404]	; (8000be4 <MX_GPIO_Init+0x2f8>)
 8000a4e:	f000 fbdd 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a64:	230e      	movs	r3, #14
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	485d      	ldr	r0, [pc, #372]	; (8000be4 <MX_GPIO_Init+0x2f8>)
 8000a70:	f000 fbcc 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4851      	ldr	r0, [pc, #324]	; (8000bd4 <MX_GPIO_Init+0x2e8>)
 8000a90:	f000 fbbc 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000a94:	2316      	movs	r3, #22
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	484a      	ldr	r0, [pc, #296]	; (8000bd4 <MX_GPIO_Init+0x2e8>)
 8000aac:	f000 fbae 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ab0:	f248 0307 	movw	r3, #32775	; 0x8007
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4844      	ldr	r0, [pc, #272]	; (8000bd8 <MX_GPIO_Init+0x2ec>)
 8000ac8:	f000 fba0 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000acc:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ade:	230e      	movs	r3, #14
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <MX_GPIO_Init+0x2ec>)
 8000aea:	f000 fb8f 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000aee:	2380      	movs	r3, #128	; 0x80
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <MX_GPIO_Init+0x2ec>)
 8000b06:	f000 fb81 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <MX_GPIO_Init+0x2e8>)
 8000b20:	f000 fb74 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000b24:	2303      	movs	r3, #3
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000b34:	2309      	movs	r3, #9
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482a      	ldr	r0, [pc, #168]	; (8000be8 <MX_GPIO_Init+0x2fc>)
 8000b40:	f000 fb64 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b44:	2304      	movs	r3, #4
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b54:	4619      	mov	r1, r3
 8000b56:	4824      	ldr	r0, [pc, #144]	; (8000be8 <MX_GPIO_Init+0x2fc>)
 8000b58:	f000 fb58 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000b5c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b76:	4619      	mov	r1, r3
 8000b78:	4819      	ldr	r0, [pc, #100]	; (8000be0 <MX_GPIO_Init+0x2f4>)
 8000b7a:	f000 fb47 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b7e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b90:	230c      	movs	r3, #12
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <MX_GPIO_Init+0x300>)
 8000b9c:	f000 fb36 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ba0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb2:	230e      	movs	r3, #14
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480a      	ldr	r0, [pc, #40]	; (8000be8 <MX_GPIO_Init+0x2fc>)
 8000bbe:	f000 fb25 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000bc2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bcc:	e010      	b.n	8000bf0 <MX_GPIO_Init+0x304>
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40020800 	.word	0x40020800
 8000bd8:	40020000 	.word	0x40020000
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40021800 	.word	0x40021800
 8000be4:	40021400 	.word	0x40021400
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40021000 	.word	0x40021000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	486b      	ldr	r0, [pc, #428]	; (8000db0 <MX_GPIO_Init+0x4c4>)
 8000c04:	f000 fb02 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4864      	ldr	r0, [pc, #400]	; (8000db0 <MX_GPIO_Init+0x4c4>)
 8000c1e:	f000 faf5 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000c22:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c26:	627b      	str	r3, [r7, #36]	; 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	485d      	ldr	r0, [pc, #372]	; (8000db4 <MX_GPIO_Init+0x4c8>)
 8000c40:	f000 fae4 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	4619      	mov	r1, r3
 8000c58:	4856      	ldr	r0, [pc, #344]	; (8000db4 <MX_GPIO_Init+0x4c8>)
 8000c5a:	f000 fad7 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c5e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c74:	4619      	mov	r1, r3
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <MX_GPIO_Init+0x4c8>)
 8000c78:	f000 fac8 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000c7c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c8e:	230e      	movs	r3, #14
 8000c90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	4619      	mov	r1, r3
 8000c98:	4847      	ldr	r0, [pc, #284]	; (8000db8 <MX_GPIO_Init+0x4cc>)
 8000c9a:	f000 fab7 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000c9e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cb0:	230e      	movs	r3, #14
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4840      	ldr	r0, [pc, #256]	; (8000dbc <MX_GPIO_Init+0x4d0>)
 8000cbc:	f000 faa6 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4837      	ldr	r0, [pc, #220]	; (8000dbc <MX_GPIO_Init+0x4d0>)
 8000cde:	f000 fa95 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce8:	2312      	movs	r3, #18
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cf4:	2304      	movs	r3, #4
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4830      	ldr	r0, [pc, #192]	; (8000dc0 <MX_GPIO_Init+0x4d4>)
 8000d00:	f000 fa84 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d04:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d16:	2307      	movs	r3, #7
 8000d18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4827      	ldr	r0, [pc, #156]	; (8000dc0 <MX_GPIO_Init+0x4d4>)
 8000d22:	f000 fa73 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000d26:	2348      	movs	r3, #72	; 0x48
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d36:	230e      	movs	r3, #14
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	481c      	ldr	r0, [pc, #112]	; (8000db4 <MX_GPIO_Init+0x4c8>)
 8000d42:	f000 fa63 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d58:	2309      	movs	r3, #9
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4619      	mov	r1, r3
 8000d62:	4815      	ldr	r0, [pc, #84]	; (8000db8 <MX_GPIO_Init+0x4cc>)
 8000d64:	f000 fa52 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d68:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_GPIO_Init+0x4cc>)
 8000d82:	f000 fa43 	bl	800120c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d92:	2303      	movs	r3, #3
 8000d94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d96:	230c      	movs	r3, #12
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <MX_GPIO_Init+0x4c4>)
 8000da2:	f000 fa33 	bl	800120c <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3738      	adds	r7, #56	; 0x38
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020400 	.word	0x40020400
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc8:	b672      	cpsid	i
}
 8000dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <Error_Handler+0x8>
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <HAL_MspInit+0x64>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <HAL_MspInit+0x64>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_MspInit+0x64>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_MspInit+0x64>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_MspInit+0x64>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_MspInit+0x64>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	210f      	movs	r1, #15
 8000e12:	f06f 0001 	mvn.w	r0, #1
 8000e16:	f000 f9c2 	bl	800119e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	2005      	movs	r0, #5
 8000e20:	f000 f9bd 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e24:	2005      	movs	r0, #5
 8000e26:	f000 f9d6 	bl	80011d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <NMI_Handler+0x4>

08000e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler+0x4>

08000e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <MemManage_Handler+0x4>

08000e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <BusFault_Handler+0x4>

08000e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <UsageFault_Handler+0x4>

08000e56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f89e 	bl	8000fa8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e6c:	f001 f9a6 	bl	80021bc <xTaskGetSchedulerState>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d001      	beq.n	8000e7a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e76:	f001 fa0f 	bl	8002298 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <SystemInit+0x20>)
 8000e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <SystemInit+0x20>)
 8000e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eb4:	480d      	ldr	r0, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eb6:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ecc:	4c0b      	ldr	r4, [pc, #44]	; (8000efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000eda:	f7ff ffd7 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f001 f9fd 	bl	80022dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ee2:	f7ff fc61 	bl	80007a8 <main>
  bx  lr    
 8000ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ee8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ef4:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8000ef8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000efc:	200000e4 	.word	0x200000e4

08000f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC_IRQHandler>
	...

08000f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0d      	ldr	r2, [pc, #52]	; (8000f44 <HAL_Init+0x40>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_Init+0x40>)
 8000f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x40>)
 8000f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f92b 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff ff4a 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40023c00 	.word	0x40023c00

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f943 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f90b 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	200000e0 	.word	0x200000e0

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	200000e0 	.word	0x200000e0

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e177      	b.n	8001518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001228:	2201      	movs	r2, #1
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	429a      	cmp	r2, r3
 8001242:	f040 8166 	bne.w	8001512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d005      	beq.n	800125e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800125a:	2b02      	cmp	r3, #2
 800125c:	d130      	bne.n	80012c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001294:	2201      	movs	r2, #1
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 0201 	and.w	r2, r3, #1
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d017      	beq.n	80012fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d123      	bne.n	8001350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	08da      	lsrs	r2, r3, #3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3208      	adds	r2, #8
 8001310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	08da      	lsrs	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3208      	adds	r2, #8
 800134a:	69b9      	ldr	r1, [r7, #24]
 800134c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	2203      	movs	r2, #3
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0203 	and.w	r2, r3, #3
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 80c0 	beq.w	8001512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_GPIO_Init+0x324>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a65      	ldr	r2, [pc, #404]	; (8001530 <HAL_GPIO_Init+0x324>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b63      	ldr	r3, [pc, #396]	; (8001530 <HAL_GPIO_Init+0x324>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ae:	4a61      	ldr	r2, [pc, #388]	; (8001534 <HAL_GPIO_Init+0x328>)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a58      	ldr	r2, [pc, #352]	; (8001538 <HAL_GPIO_Init+0x32c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d037      	beq.n	800144a <HAL_GPIO_Init+0x23e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a57      	ldr	r2, [pc, #348]	; (800153c <HAL_GPIO_Init+0x330>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d031      	beq.n	8001446 <HAL_GPIO_Init+0x23a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a56      	ldr	r2, [pc, #344]	; (8001540 <HAL_GPIO_Init+0x334>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d02b      	beq.n	8001442 <HAL_GPIO_Init+0x236>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a55      	ldr	r2, [pc, #340]	; (8001544 <HAL_GPIO_Init+0x338>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d025      	beq.n	800143e <HAL_GPIO_Init+0x232>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a54      	ldr	r2, [pc, #336]	; (8001548 <HAL_GPIO_Init+0x33c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01f      	beq.n	800143a <HAL_GPIO_Init+0x22e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a53      	ldr	r2, [pc, #332]	; (800154c <HAL_GPIO_Init+0x340>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d019      	beq.n	8001436 <HAL_GPIO_Init+0x22a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a52      	ldr	r2, [pc, #328]	; (8001550 <HAL_GPIO_Init+0x344>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x226>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a51      	ldr	r2, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x348>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x222>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a50      	ldr	r2, [pc, #320]	; (8001558 <HAL_GPIO_Init+0x34c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x21e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a4f      	ldr	r2, [pc, #316]	; (800155c <HAL_GPIO_Init+0x350>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x21a>
 8001422:	2309      	movs	r3, #9
 8001424:	e012      	b.n	800144c <HAL_GPIO_Init+0x240>
 8001426:	230a      	movs	r3, #10
 8001428:	e010      	b.n	800144c <HAL_GPIO_Init+0x240>
 800142a:	2308      	movs	r3, #8
 800142c:	e00e      	b.n	800144c <HAL_GPIO_Init+0x240>
 800142e:	2307      	movs	r3, #7
 8001430:	e00c      	b.n	800144c <HAL_GPIO_Init+0x240>
 8001432:	2306      	movs	r3, #6
 8001434:	e00a      	b.n	800144c <HAL_GPIO_Init+0x240>
 8001436:	2305      	movs	r3, #5
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x240>
 800143a:	2304      	movs	r3, #4
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x240>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x240>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x240>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x240>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x328>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_GPIO_Init+0x354>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148e:	4a34      	ldr	r2, [pc, #208]	; (8001560 <HAL_GPIO_Init+0x354>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001494:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_GPIO_Init+0x354>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014b8:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_GPIO_Init+0x354>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <HAL_GPIO_Init+0x354>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014e2:	4a1f      	ldr	r2, [pc, #124]	; (8001560 <HAL_GPIO_Init+0x354>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <HAL_GPIO_Init+0x354>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800150c:	4a14      	ldr	r2, [pc, #80]	; (8001560 <HAL_GPIO_Init+0x354>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f ae84 	bls.w	8001228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40021400 	.word	0x40021400
 8001550:	40021800 	.word	0x40021800
 8001554:	40021c00 	.word	0x40021c00
 8001558:	40022000 	.word	0x40022000
 800155c:	40022400 	.word	0x40022400
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b20      	ldr	r3, [pc, #128]	; (8001628 <HAL_PWREx_EnableOverDrive+0x90>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a1f      	ldr	r2, [pc, #124]	; (8001628 <HAL_PWREx_EnableOverDrive+0x90>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <HAL_PWREx_EnableOverDrive+0x90>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <HAL_PWREx_EnableOverDrive+0x94>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff fd04 	bl	8000fd0 <HAL_GetTick>
 80015c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015ca:	e009      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015cc:	f7ff fd00 	bl	8000fd0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015da:	d901      	bls.n	80015e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e01f      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_PWREx_EnableOverDrive+0x98>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ec:	d1ee      	bne.n	80015cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff fcec 	bl	8000fd0 <HAL_GetTick>
 80015f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015fa:	e009      	b.n	8001610 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015fc:	f7ff fce8 	bl	8000fd0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160a:	d901      	bls.n	8001610 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e007      	b.n	8001620 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_PWREx_EnableOverDrive+0x98>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800161c:	d1ee      	bne.n	80015fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40023800 	.word	0x40023800
 800162c:	420e0040 	.word	0x420e0040
 8001630:	40007000 	.word	0x40007000
 8001634:	420e0044 	.word	0x420e0044

08001638 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e264      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d075      	beq.n	8001742 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d00c      	beq.n	800167c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001662:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800166a:	2b08      	cmp	r3, #8
 800166c:	d112      	bne.n	8001694 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800167a:	d10b      	bne.n	8001694 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800167c:	4b99      	ldr	r3, [pc, #612]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05b      	beq.n	8001740 <HAL_RCC_OscConfig+0x108>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d157      	bne.n	8001740 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e23f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d106      	bne.n	80016ac <HAL_RCC_OscConfig+0x74>
 800169e:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a90      	ldr	r2, [pc, #576]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x98>
 80016b6:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a8a      	ldr	r2, [pc, #552]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xb0>
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a83      	ldr	r2, [pc, #524]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b81      	ldr	r3, [pc, #516]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a80      	ldr	r2, [pc, #512]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc6e 	bl	8000fd0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff fc6a 	bl	8000fd0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e204      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xc0>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fc5a 	bl	8000fd0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fc56 	bl	8000fd0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1f0      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0xe8>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d063      	beq.n	8001816 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174e:	4b65      	ldr	r3, [pc, #404]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b62      	ldr	r3, [pc, #392]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001762:	2b08      	cmp	r3, #8
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d116      	bne.n	80017a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x152>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e1c4      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4952      	ldr	r1, [pc, #328]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	e03a      	b.n	8001816 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a8:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCC_OscConfig+0x2b0>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff fc0f 	bl	8000fd0 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff fc0b 	bl	8000fd0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1a5      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4b46      	ldr	r3, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4940      	ldr	r1, [pc, #256]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ea:	4b3f      	ldr	r3, [pc, #252]	; (80018e8 <HAL_RCC_OscConfig+0x2b0>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fbee 	bl	8000fd0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff fbea 	bl	8000fd0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e184      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	4b36      	ldr	r3, [pc, #216]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d030      	beq.n	8001884 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_OscConfig+0x2b4>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fbce 	bl	8000fd0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff fbca 	bl	8000fd0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e164      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800184c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x200>
 8001856:	e015      	b.n	8001884 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x2b4>)
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbb7 	bl	8000fd0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001866:	f7ff fbb3 	bl	8000fd0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e14d      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f0      	bne.n	8001866 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80a0 	beq.w	80019d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d121      	bne.n	8001912 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <HAL_RCC_OscConfig+0x2b8>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff fb79 	bl	8000fd0 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e011      	b.n	8001906 <HAL_RCC_OscConfig+0x2ce>
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	42470000 	.word	0x42470000
 80018ec:	42470e80 	.word	0x42470e80
 80018f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff fb6c 	bl	8000fd0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e106      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b85      	ldr	r3, [pc, #532]	; (8001b1c <HAL_RCC_OscConfig+0x4e4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 800191a:	4b81      	ldr	r3, [pc, #516]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a80      	ldr	r2, [pc, #512]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e01c      	b.n	8001962 <HAL_RCC_OscConfig+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x312>
 8001930:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a7a      	ldr	r2, [pc, #488]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a77      	ldr	r2, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x32a>
 800194a:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	4a74      	ldr	r2, [pc, #464]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	6713      	str	r3, [r2, #112]	; 0x70
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195a:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 800195c:	f023 0304 	bic.w	r3, r3, #4
 8001960:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d015      	beq.n	8001996 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800196a:	f7ff fb31 	bl	8000fd0 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001972:	f7ff fb2d 	bl	8000fd0 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001980:	4293      	cmp	r3, r2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e0c5      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0ee      	beq.n	8001972 <HAL_RCC_OscConfig+0x33a>
 8001994:	e014      	b.n	80019c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7ff fb1b 	bl	8000fd0 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fb17 	bl	8000fd0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0af      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b4:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 80019b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ee      	bne.n	800199e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019c0:	7dfb      	ldrb	r3, [r7, #23]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c6:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a55      	ldr	r2, [pc, #340]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 80019cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 809b 	beq.w	8001b12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d05c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d141      	bne.n	8001a74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x4ec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f6:	f7ff faeb 	bl	8000fd0 <HAL_GetTick>
 80019fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fe:	f7ff fae7 	bl	8000fd0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e081      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	019b      	lsls	r3, r3, #6
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	041b      	lsls	r3, r3, #16
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_OscConfig+0x4ec>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fac0 	bl	8000fd0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff fabc 	bl	8000fd0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e056      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0x41c>
 8001a72:	e04e      	b.n	8001b12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_RCC_OscConfig+0x4ec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7a:	f7ff faa9 	bl	8000fd0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff faa5 	bl	8000fd0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03f      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x44a>
 8001aa0:	e037      	b.n	8001b12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e032      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_RCC_OscConfig+0x4e8>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d028      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d121      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d11a      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ade:	4013      	ands	r3, r2
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d111      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	3b01      	subs	r3, #1
 8001af8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	40023800 	.word	0x40023800
 8001b24:	42470060 	.word	0x42470060

08001b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0cc      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b68      	ldr	r3, [pc, #416]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 030f 	and.w	r3, r3, #15
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d90c      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b65      	ldr	r3, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0b8      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d020      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b7c:	4b59      	ldr	r3, [pc, #356]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	4a58      	ldr	r2, [pc, #352]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0308 	and.w	r3, r3, #8
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba0:	4b50      	ldr	r3, [pc, #320]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	494d      	ldr	r1, [pc, #308]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d044      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc6:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d119      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e07f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d003      	beq.n	8001be6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be6:	4b3f      	ldr	r3, [pc, #252]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d109      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e06f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e067      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f023 0203 	bic.w	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4934      	ldr	r1, [pc, #208]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7ff f9da 	bl	8000fd0 <HAL_GetTick>
 8001c1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff f9d6 	bl	8000fd0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e04f      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 020c 	and.w	r2, r3, #12
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1eb      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d20c      	bcs.n	8001c70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e032      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	4916      	ldr	r1, [pc, #88]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d009      	beq.n	8001cae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cae:	f000 f821 	bl	8001cf4 <HAL_RCC_GetSysClockFreq>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	091b      	lsrs	r3, r3, #4
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	490a      	ldr	r1, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	5ccb      	ldrb	r3, [r1, r3]
 8001cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc6:	4a09      	ldr	r2, [pc, #36]	; (8001cec <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f93a 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	0800236c 	.word	0x0800236c
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	20000004 	.word	0x20000004

08001cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	2300      	movs	r3, #0
 8001d06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0c:	4b67      	ldr	r3, [pc, #412]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 030c 	and.w	r3, r3, #12
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d00d      	beq.n	8001d34 <HAL_RCC_GetSysClockFreq+0x40>
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	f200 80bd 	bhi.w	8001e98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x34>
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001d26:	e0b7      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d2a:	60bb      	str	r3, [r7, #8]
       break;
 8001d2c:	e0b7      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001d30:	60bb      	str	r3, [r7, #8]
      break;
 8001d32:	e0b4      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d34:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d04d      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d4a:	4b58      	ldr	r3, [pc, #352]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	099b      	lsrs	r3, r3, #6
 8001d50:	461a      	mov	r2, r3
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d5a:	f04f 0100 	mov.w	r1, #0
 8001d5e:	ea02 0800 	and.w	r8, r2, r0
 8001d62:	ea03 0901 	and.w	r9, r3, r1
 8001d66:	4640      	mov	r0, r8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	014b      	lsls	r3, r1, #5
 8001d74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d78:	0142      	lsls	r2, r0, #5
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	ebb0 0008 	subs.w	r0, r0, r8
 8001d82:	eb61 0109 	sbc.w	r1, r1, r9
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	018b      	lsls	r3, r1, #6
 8001d90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d94:	0182      	lsls	r2, r0, #6
 8001d96:	1a12      	subs	r2, r2, r0
 8001d98:	eb63 0301 	sbc.w	r3, r3, r1
 8001d9c:	f04f 0000 	mov.w	r0, #0
 8001da0:	f04f 0100 	mov.w	r1, #0
 8001da4:	00d9      	lsls	r1, r3, #3
 8001da6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001daa:	00d0      	lsls	r0, r2, #3
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	eb12 0208 	adds.w	r2, r2, r8
 8001db4:	eb43 0309 	adc.w	r3, r3, r9
 8001db8:	f04f 0000 	mov.w	r0, #0
 8001dbc:	f04f 0100 	mov.w	r1, #0
 8001dc0:	0259      	lsls	r1, r3, #9
 8001dc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dc6:	0250      	lsls	r0, r2, #9
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	f7fe fa12 	bl	8000200 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4613      	mov	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	e04a      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	099b      	lsrs	r3, r3, #6
 8001dec:	461a      	mov	r2, r3
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	ea02 0400 	and.w	r4, r2, r0
 8001dfe:	ea03 0501 	and.w	r5, r3, r1
 8001e02:	4620      	mov	r0, r4
 8001e04:	4629      	mov	r1, r5
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	014b      	lsls	r3, r1, #5
 8001e10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e14:	0142      	lsls	r2, r0, #5
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	1b00      	subs	r0, r0, r4
 8001e1c:	eb61 0105 	sbc.w	r1, r1, r5
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	018b      	lsls	r3, r1, #6
 8001e2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2e:	0182      	lsls	r2, r0, #6
 8001e30:	1a12      	subs	r2, r2, r0
 8001e32:	eb63 0301 	sbc.w	r3, r3, r1
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	00d9      	lsls	r1, r3, #3
 8001e40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e44:	00d0      	lsls	r0, r2, #3
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	1912      	adds	r2, r2, r4
 8001e4c:	eb45 0303 	adc.w	r3, r5, r3
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0299      	lsls	r1, r3, #10
 8001e5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e5e:	0290      	lsls	r0, r2, #10
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe f9c6 	bl	8000200 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	60bb      	str	r3, [r7, #8]
      break;
 8001e96:	e002      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e9a:	60bb      	str	r3, [r7, #8]
      break;
 8001e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9e:	68bb      	ldr	r3, [r7, #8]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	007a1200 	.word	0x007a1200

08001eb8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6892      	ldr	r2, [r2, #8]
 8001f16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6852      	ldr	r2, [r2, #4]
 8001f20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d103      	bne.n	8001f34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	1e5a      	subs	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5e:	4b4e      	ldr	r3, [pc, #312]	; (8002098 <xTaskIncrementTick+0x144>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 808e 	bne.w	8002084 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f68:	4b4c      	ldr	r3, [pc, #304]	; (800209c <xTaskIncrementTick+0x148>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f70:	4a4a      	ldr	r2, [pc, #296]	; (800209c <xTaskIncrementTick+0x148>)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d120      	bne.n	8001fbe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <xTaskIncrementTick+0x14c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00a      	beq.n	8001f9c <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8a:	f383 8811 	msr	BASEPRI, r3
 8001f8e:	f3bf 8f6f 	isb	sy
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f98:	bf00      	nop
 8001f9a:	e7fe      	b.n	8001f9a <xTaskIncrementTick+0x46>
 8001f9c:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <xTaskIncrementTick+0x14c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <xTaskIncrementTick+0x150>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <xTaskIncrementTick+0x14c>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4a3e      	ldr	r2, [pc, #248]	; (80020a4 <xTaskIncrementTick+0x150>)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <xTaskIncrementTick+0x154>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4a3c      	ldr	r2, [pc, #240]	; (80020a8 <xTaskIncrementTick+0x154>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	f000 f8df 	bl	800217c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fbe:	4b3b      	ldr	r3, [pc, #236]	; (80020ac <xTaskIncrementTick+0x158>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d348      	bcc.n	800205a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fc8:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <xTaskIncrementTick+0x14c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d104      	bne.n	8001fdc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fd2:	4b36      	ldr	r3, [pc, #216]	; (80020ac <xTaskIncrementTick+0x158>)
 8001fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd8:	601a      	str	r2, [r3, #0]
					break;
 8001fda:	e03e      	b.n	800205a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <xTaskIncrementTick+0x14c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d203      	bcs.n	8001ffc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ff4:	4a2d      	ldr	r2, [pc, #180]	; (80020ac <xTaskIncrementTick+0x158>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001ffa:	e02e      	b.n	800205a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3304      	adds	r3, #4
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff7d 	bl	8001f00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3318      	adds	r3, #24
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff74 	bl	8001f00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2201      	movs	r2, #1
 800201e:	409a      	lsls	r2, r3
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <xTaskIncrementTick+0x15c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4313      	orrs	r3, r2
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <xTaskIncrementTick+0x15c>)
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a1f      	ldr	r2, [pc, #124]	; (80020b4 <xTaskIncrementTick+0x160>)
 8002038:	441a      	add	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3304      	adds	r3, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f7ff ff39 	bl	8001eb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <xTaskIncrementTick+0x164>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	429a      	cmp	r2, r3
 8002052:	d3b9      	bcc.n	8001fc8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002058:	e7b6      	b.n	8001fc8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <xTaskIncrementTick+0x164>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002060:	4914      	ldr	r1, [pc, #80]	; (80020b4 <xTaskIncrementTick+0x160>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d901      	bls.n	8002076 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <xTaskIncrementTick+0x168>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800207e:	2301      	movs	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e004      	b.n	800208e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <xTaskIncrementTick+0x16c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	3301      	adds	r3, #1
 800208a:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <xTaskIncrementTick+0x16c>)
 800208c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800208e:	697b      	ldr	r3, [r7, #20]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200000dc 	.word	0x200000dc
 800209c:	200000c0 	.word	0x200000c0
 80020a0:	200000b8 	.word	0x200000b8
 80020a4:	200000bc 	.word	0x200000bc
 80020a8:	200000d4 	.word	0x200000d4
 80020ac:	200000d8 	.word	0x200000d8
 80020b0:	200000c4 	.word	0x200000c4
 80020b4:	2000002c 	.word	0x2000002c
 80020b8:	20000028 	.word	0x20000028
 80020bc:	200000d0 	.word	0x200000d0
 80020c0:	200000cc 	.word	0x200000cc

080020c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <vTaskSwitchContext+0xa4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <vTaskSwitchContext+0xa8>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020d8:	e03f      	b.n	800215a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80020da:	4b24      	ldr	r3, [pc, #144]	; (800216c <vTaskSwitchContext+0xa8>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020e0:	4b23      	ldr	r3, [pc, #140]	; (8002170 <vTaskSwitchContext+0xac>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020ee:	7afb      	ldrb	r3, [r7, #11]
 80020f0:	f1c3 031f 	rsb	r3, r3, #31
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	491f      	ldr	r1, [pc, #124]	; (8002174 <vTaskSwitchContext+0xb0>)
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <vTaskSwitchContext+0x5c>
	__asm volatile
 800210a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210e:	f383 8811 	msr	BASEPRI, r3
 8002112:	f3bf 8f6f 	isb	sy
 8002116:	f3bf 8f4f 	dsb	sy
 800211a:	607b      	str	r3, [r7, #4]
}
 800211c:	bf00      	nop
 800211e:	e7fe      	b.n	800211e <vTaskSwitchContext+0x5a>
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <vTaskSwitchContext+0xb0>)
 800212c:	4413      	add	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	3308      	adds	r3, #8
 8002142:	429a      	cmp	r2, r3
 8002144:	d104      	bne.n	8002150 <vTaskSwitchContext+0x8c>
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <vTaskSwitchContext+0xb4>)
 8002158:	6013      	str	r3, [r2, #0]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	200000dc 	.word	0x200000dc
 800216c:	200000d0 	.word	0x200000d0
 8002170:	200000c4 	.word	0x200000c4
 8002174:	2000002c 	.word	0x2000002c
 8002178:	20000028 	.word	0x20000028

0800217c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <prvResetNextTaskUnblockTime+0x38>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <prvResetNextTaskUnblockTime+0x3c>)
 800218e:	f04f 32ff 	mov.w	r2, #4294967295
 8002192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002194:	e008      	b.n	80021a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <prvResetNextTaskUnblockTime+0x38>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <prvResetNextTaskUnblockTime+0x3c>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	200000b8 	.word	0x200000b8
 80021b8:	200000d8 	.word	0x200000d8

080021bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <xTaskGetSchedulerState+0x34>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021ca:	2301      	movs	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	e008      	b.n	80021e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <xTaskGetSchedulerState+0x38>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021d8:	2302      	movs	r3, #2
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	e001      	b.n	80021e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021e2:	687b      	ldr	r3, [r7, #4]
	}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	200000c8 	.word	0x200000c8
 80021f4:	200000dc 	.word	0x200000dc
	...

08002200 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <pxCurrentTCBConst2>)
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	6808      	ldr	r0, [r1, #0]
 8002206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800220a:	f380 8809 	msr	PSP, r0
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f04f 0000 	mov.w	r0, #0
 8002216:	f380 8811 	msr	BASEPRI, r0
 800221a:	4770      	bx	lr
 800221c:	f3af 8000 	nop.w

08002220 <pxCurrentTCBConst2>:
 8002220:	20000028 	.word	0x20000028
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
	...

08002230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002230:	f3ef 8009 	mrs	r0, PSP
 8002234:	f3bf 8f6f 	isb	sy
 8002238:	4b15      	ldr	r3, [pc, #84]	; (8002290 <pxCurrentTCBConst>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	f01e 0f10 	tst.w	lr, #16
 8002240:	bf08      	it	eq
 8002242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224a:	6010      	str	r0, [r2, #0]
 800224c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002254:	f380 8811 	msr	BASEPRI, r0
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f7ff ff30 	bl	80020c4 <vTaskSwitchContext>
 8002264:	f04f 0000 	mov.w	r0, #0
 8002268:	f380 8811 	msr	BASEPRI, r0
 800226c:	bc09      	pop	{r0, r3}
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	6808      	ldr	r0, [r1, #0]
 8002272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002276:	f01e 0f10 	tst.w	lr, #16
 800227a:	bf08      	it	eq
 800227c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002280:	f380 8809 	msr	PSP, r0
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	f3af 8000 	nop.w

08002290 <pxCurrentTCBConst>:
 8002290:	20000028 	.word	0x20000028
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop

08002298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
	__asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	607b      	str	r3, [r7, #4]
}
 80022b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80022b2:	f7ff fe4f 	bl	8001f54 <xTaskIncrementTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <xPortSysTickHandler+0x40>)
 80022be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80022ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	e000ed04 	.word	0xe000ed04

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	4d0d      	ldr	r5, [pc, #52]	; (8002314 <__libc_init_array+0x38>)
 80022e0:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e2:	1b64      	subs	r4, r4, r5
 80022e4:	10a4      	asrs	r4, r4, #2
 80022e6:	2600      	movs	r6, #0
 80022e8:	42a6      	cmp	r6, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	4d0b      	ldr	r5, [pc, #44]	; (800231c <__libc_init_array+0x40>)
 80022ee:	4c0c      	ldr	r4, [pc, #48]	; (8002320 <__libc_init_array+0x44>)
 80022f0:	f000 f820 	bl	8002334 <_init>
 80022f4:	1b64      	subs	r4, r4, r5
 80022f6:	10a4      	asrs	r4, r4, #2
 80022f8:	2600      	movs	r6, #0
 80022fa:	42a6      	cmp	r6, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	f855 3b04 	ldr.w	r3, [r5], #4
 8002304:	4798      	blx	r3
 8002306:	3601      	adds	r6, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	f855 3b04 	ldr.w	r3, [r5], #4
 800230e:	4798      	blx	r3
 8002310:	3601      	adds	r6, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	08002384 	.word	0x08002384
 8002318:	08002384 	.word	0x08002384
 800231c:	08002384 	.word	0x08002384
 8002320:	08002388 	.word	0x08002388

08002324 <memset>:
 8002324:	4402      	add	r2, r0
 8002326:	4603      	mov	r3, r0
 8002328:	4293      	cmp	r3, r2
 800232a:	d100      	bne.n	800232e <memset+0xa>
 800232c:	4770      	bx	lr
 800232e:	f803 1b01 	strb.w	r1, [r3], #1
 8002332:	e7f9      	b.n	8002328 <memset+0x4>

08002334 <_init>:
 8002334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002336:	bf00      	nop
 8002338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800233a:	bc08      	pop	{r3}
 800233c:	469e      	mov	lr, r3
 800233e:	4770      	bx	lr

08002340 <_fini>:
 8002340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002342:	bf00      	nop
 8002344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002346:	bc08      	pop	{r3}
 8002348:	469e      	mov	lr, r3
 800234a:	4770      	bx	lr
